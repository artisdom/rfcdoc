<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?rfc toc="yes"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>
<rfc ipr="noModificationTrust200811"   category="info"
    docName="rfcdoc" >
    <front>
    <title abbrev="">rfcdoc: tools for building RFC and Internet-Drafts</title>

    <author initials="P" surname="Shafer" fullname='Phil Shafer' >
      <organization>Juniper Networks</organization>
      <address>
        <email>phil@juniper.net</email>
      </address>
    </author>
        <date/>
    <abstract>
        <t>
This document describes a set of tools for formatting RFCs, Internet
Drafts, and other documentation, collectively called &quot;rfcdoc&quot;.  These
tools simplify the creation of documents by allowing authors to write
in plain text files instead of hand-editing XML files.  Also files
like YANG modules and example content files are kept in distinct files
to allow validation of their content and allow editors to enable
mode-specific features.  The files are then combined via commands
triggered by &quot;make&quot; to generate complete RFCs and Internet-Drafts.
        </t>
</abstract>
</front>
<middle>
<section title="Introduction" anchor="introduction">
<section title="History" anchor="history">
    <t>
In the NETCONF/NETMOD working groups, we&apos;ve been using some simple
tools to ease the production of Internet Drafts and RFCs.  I use
the same tools for various open source projects (libxo, libslax,
juise).  The goals are simple:
    </t>
<t>
 <list style="symbols">
 <t>
Humans should never write XML; it&apos;s a fine language for machine
interchange, for making people write it directly is just plain mean.
 </t>
 <t>
Text should be email friendly.  We all use email to talk/review,
so having non-text formats make no sense.
 </t>
 <t>
There are existing text conventions (even twenty plus years ago when
I first wrote these tools) to allow semantic formatting.
 </t>
 <t>
When they aren&apos;t, we can roll-our-own easily enough.
 </t>
 </list>
</t>
    <t>
With those simple goals, let me introduce our tools.
    </t>
    <t>
If you lack the patience to weed through all these details, feel free
to skip directly to the &quot;how to&quot; instructions locatated in <xref target="how-to"/>.
    </t>
</section>
<section title="oxtradoc" anchor="oxtradoc">
    <t>
&quot;oxtradoc&quot; is the main tool, which turns text into &quot;xml2rfc&quot;-style XML
content.  &quot;oxtradoc&quot; stands for &quot;outputs xml to rfc and
documentation&quot;.  Not the best name, but at least I didn&apos;t call it
&quot;doccer&quot;.
    </t>
    <t>
Full documentation on oxtradoc&apos;s formatting features is available in
<xref target="oxtradoc"/>.
    </t>
</section>
<section title="xml2rfc" anchor="xml2rfc">
    <t>
&quot;xml2rfc&quot; is a python script that turns XML of a certain format into
RFC-style text.  It&apos;s very good at what it does and I&apos;m so glad I
didn&apos;t have to write it.
    </t>
    <t>
By far the most pertinent fact about xml2rfc here is that we don&apos;t
ever need to hand-write XML content for it.  It is used to process XML
generated by oxtradoc.  See also:
    </t>
    <t>
https://pypi.python.org/pypi/xml2rfc
https://xml2rfc.tools.ietf.org/public/rfc/html/rfc2629.html
    </t>
</section>
<section title="pyang" anchor="pyang">
    <t>
Everyone&apos;s favorite open-source YANG compiler, with a plug-in facility
that allows various output targets.  For details, see the following
link:
    </t>
    <t>
https://github.com/mbj4668/pyang
    </t>
</section>
<section title="make" anchor="make">
    <t>
&quot;make&quot; is the glue that holds it all together.  The file &quot;rfcdoc.mk&quot;
spells out the dependencies and commands that get the tools invoked
correctly.
    </t>
    <t>
There are &quot;make&quot; targets for producing the final documents, as well as
checking the content of YANG modules and example data files.  &quot;YANG
tree&quot; files can also be automatically generated.
    </t>
    <t>
Together these tools allow RFC authors to simplify their workload, be
more productive, make fewer mistakes, and generate more accurate and
useful drafts.
    </t>
</section>
</section>
<section title="oxtradoc" anchor="oxtradoc-2">
    <t>
&quot;oxtradoc&quot; performs the translation from plain text into xml2rfc-style
XML content.  Specific rules must be followed, but the text input is
generally readable and simple to understand.
    </t>
<section title="Rules for Formatting" anchor="rules-for-formatting">
<section title="Headings, References, and Outline/Org Mode" anchor="headings-references-and-outlineorg-mode">
    <t>
Emacs has a mode called &quot;outline mode&quot;, which allows organization of
text.  &quot;outline mode&quot; has numerous functions for displaying and
traversing these hierachies.  See
<eref target="https://www.emacswiki.org/emacs/OutlineMode">https://www.emacswiki.org/emacs/OutlineMode</eref> for details.
    </t>
    <t>
Another mode called &quot;org mode&quot; extends this mode with additional
formatting conventions.  &quot;org mode&quot; is a super set of &quot;outline mode&quot;
and can be used similarly.  See <eref target="http://orgmode.org">http://orgmode.org</eref> for details.
    </t>
<t>
 <list style="symbols">
 <t>
Headings are in Emacs &quot;outline mode&quot;, where heading depth is
indicated a leading series of asterisks (&quot;*&quot;).  The more asteriskss,
the deeper the heading.
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
    * History
    ** Early History
    *** History That Time Forgot
    ** Middle History
    ** Late History
    *** Missing History
    **** Dog Ate My History
            ]]></artwork>
        </figure>
<t>
 <list style="symbols">
 <t>
References can be make to URLs, anchors (headings), or external
references.  A reference uses the convention of the target surrounded
by up-hats:
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
    The source of the Nile (^NILESOURCE^) was
    unknown (^NILEHISTORY^).
            ]]></artwork>
        </figure>
<t>
 <list style="symbols">
 <t>
Headings can be used as the anchors.  An explicit anchor name can be
provided by placing the name at the end of the heading line between
&quot;at&quot; signs (&quot;@&quot;), e.g. &quot;@anchor&#8209;name@&quot;.
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
    *** Possible Sources of the Nile @NILESOURCE@
            ]]></artwork>
        </figure>
<t>
 <list style="symbols">
 <t>
If no explicit name is given, the anchor name will be the heading
content with the following conversions:
  <list style="symbols">
  <t>
Upper case is translation into lower case.
  </t>
  <t>
Spaces are translated into dashes (&quot;&#8209;&quot;).
  </t>
  <t>
Any non-alphanumeric characters besides dash and underscore are removed.
  </t>
  </list>
 </t>
 <t>
A reference to an internal anchor is translated to the section
number of the anchor&apos;s heading, prefixed with the word &quot;Section&quot;,
e.g. &quot;Section 4.2.1&quot;.  To suppress the prefix, use dual uphats:
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
    See sections ^^ref-one^^ and ^^ref-two^^.
            ]]></artwork>
        </figure>
</section>
<section title="Paragraphs" anchor="paragraphs">
<t>
 <list style="symbols">
 <t>
Paragraphs of text are separated by blank links, just like one types
normally.
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
  We are met on a great battlefield of that war.  We have come to
  dedicate a portion of that field as a final resting place for
  those who here gave their lives that that nation might live.

  It is altogether fitting and proper that we should do this.  But
  in a larger sense we can not dedicate -- we can not consecrate --
  we can not hallow -- this ground.  The brave men living and dead
  who struggled here have consecrated it far above our poor power to
  add or detract.

  The world will little note nor long remember what we say here but
  it can never forget what they did here.  It is for us the living
  rather to be dedicated here to the unfinished work which they who
  fought here have thus far so nobly advanced
            ]]></artwork>
        </figure>
</section>
<section title="Preserved Content" anchor="preserved-content">
    <t>
Figures, XML, code, and ASCII art can be placed directly in the file
by indenting the content.  When text is intended, the other rules of
formatting are not applied.  While &quot;oxtradoc&quot; can detect the &quot;type&quot; of
the content (in terms of XML, code, artwork, etc), any such content is
wrapped in the xml2rfc &quot;figure&quot; and &quot;artwork&quot; tags, and is not
formatted.
    </t>
    <t>
Example:
    </t>
        <figure>
            <artwork><![CDATA[
    +----+             +------+                +-------------+
    | me |-->(emacs)-->| text |-->(oxtradoc)-->|documentation|
    +----+             +------+                +-------------+
            ]]></artwork>
        </figure>
    <t>
Example:
    </t>
        <figure>
            <artwork><![CDATA[
    <rpc>
        <order-lunch>
          <togo/>
          <pizza>
             <size><large/></size>
             <topping><sausage/></topping>
          </pizza>
        </order-lunch>
    </rpc>
            ]]></artwork>
        </figure>
    <t>
Note that there is no need to hand-escape less-than and greater-than
characters; &quot;oxtradoc&quot; does this automatically.
    </t>
<section title="External Figures" anchor="external-figures">
    <t>
Figures can be placed in external files and included using the
filename using a line containing &quot;!!include&#8209;figure&quot;:
    </t>
        <figure>
            <artwork><![CDATA[
   !!include-figure ex-content.xml
            ]]></artwork>
        </figure>
    <t>
An &quot;extract&#8209;to&quot; value can be added to indicate a desired extraction
filename: 
    </t>
        <figure>
            <artwork><![CDATA[
   !!include-figure my.yang extract-to="my-@2017-04-01.yang"
            ]]></artwork>
        </figure>
    <t>
Putting such content in external files allows the content to be
validated, as well as allowing text editors to apply mode-specific
behaviors such as intentation or colored display.
    </t>
</section>
</section>
<section title="Lists" anchor="lists">
    <t>
&quot;oxtradoc&quot; supports a number of types of lists, based on simple text
encoding conventions.
    </t>
<section title="Symbol Lists" anchor="symbol-lists">
    <t>
A dash (&quot;&#8209;&quot;) at the beginning of the line marks a symbol list item,
where the item will be prefixed with a symbol.
    </t>
    <t>
Example::
    </t>
        <figure>
            <artwork><![CDATA[
   Favorite Things:
   - Raindrops on roses
   - Whiskers on kittens
            ]]></artwork>
        </figure>
    <t>
Formatted output::
    </t>
    <t>
Favorite Things:
    </t>
<t>
 <list style="symbols">
 <t>
Raindrops on roses
 </t>
 <t>
Whiskers on kittens
 </t>
 </list>
</t>
</section>
<section title="Empty Lists" anchor="empty-lists">
    <t>
An underscore (&quot;_&quot;) at the beginning of the line marks an empty list
item, where the item will not be prefixed with a symbol.  This allows
the lines to be adjacent without being wrapped together.
    </t>
    <t>
Example::
    </t>
        <figure>
            <artwork><![CDATA[
   _ Do not pass Go
   _ Do not collect $200
            ]]></artwork>
        </figure>
    <t>
Formatted output::
    </t>
<t>
 <list style="empty">
 <t>
Do not pass Go
 </t>
 <t>
Do not collect $200
 </t>
 </list>
</t>
</section>
<section title="Numbered Lists" anchor="numbered-lists">
    <t>
A plus sign (&quot;+&quot;) at the beginning of the line marks a numbered list
item, where the item is prefixed with an increasing integer number.
    </t>
    <t>
Example::
    </t>
        <figure>
            <artwork><![CDATA[
   + The money
   + The show
   + Get ready
   + Go, Cat, Go!
            ]]></artwork>
        </figure>
    <t>
Formatted output::
    </t>
<t>
 <list style="numbers">
 <t>
The money
 </t>
 <t>
The show
 </t>
 <t>
Get ready
 </t>
 <t>
Go, Cat, Go!
 </t>
 </list>
</t>
</section>
<section title="Hanging Lists" anchor="hanging-lists">
    <t>
An equals sign (&quot;=&quot;) at the beginning of the line marks an hanging
list item, where the rest of the line is the hang text and the
following lines are the content.
    </t>
    <t>
Example::
    </t>
        <figure>
            <artwork><![CDATA[
   = 64-bit
   Machines that have 64-bit CPUs
   = 32-bit
   Machines that have 32-bit CPUs
   = 8-bit
   Machines that are really, really old
            ]]></artwork>
        </figure>
    <t>
Formatted output::
    </t>
<t>
 <list style="hanging">
        <t hangText="64-bit">
Machines that have 64-bit CPUs
 </t>
        <t hangText="32-bit">
Machines that have 32-bit CPUs
 </t>
        <t hangText="8-bit">
Machines that are really, really old
 </t>
 </list>
</t>
</section>
</section>
<section title="Tables" anchor="fake-ref">
    <t>
oxtradoc using &quot;org mode&quot; tables.  These tables are simple, visually
accurate, and can be automatically generated using Emacs tools.  See
<eref target="http://orgmode.org/guide/Tables.html">http://orgmode.org/guide/Tables.html</eref> for additional information.
    </t>
    <t>
The rules for these tables are fairly simple:
    </t>
<t>
 <list style="symbols">
 <t>
Tables start with a vertical bar (&quot;|&quot;).
 </t>
 <t>
Table headers appear next, separated by vertical bars.
 </t>
 <t>
A separator line follows, containing vertical bars and plus signs.
 </t>
 <t>
Content follows, separated by vertical bars.
 </t>
 <t>
If a title is needed, the table is preceeded by a line containing
two dashes, the title, and an optional anchor:
 </t>
 </list>
</t>
    <t>
Example::
    </t>
        <figure>
            <artwork><![CDATA[
    -- List of Sub-Statements @sub-list@
    | substatement | section         | cardinality |
    |--------------+-----------------+-------------|
    | argument     | ^extension-arg^ |        0..1 |
    | description  | ^description^   |        0..1 |
    | reference    | ^reference^     |        0..1 |
    | status       | ^status^        |        0..1 |
            ]]></artwork>
        </figure>
    <t>
Formatted output::
    </t>
<?rfc compact="yes"?>
<texttable anchor="sub-list" title="List of Sub-Statements">
<ttcol align='left'>substatement</ttcol>
<ttcol align='left'>section</ttcol>
<ttcol align='left'>cardinality</ttcol>
<c>argument</c>
<c><xref target="fake-ref"/></c>
<c>0..1</c>
<c>description</c>
<c><xref target="fake-ref"/></c>
<c>0..1</c>
<c>reference</c>
<c><xref target="fake-ref"/></c>
<c>0..1</c>
<c>status</c>
<c><xref target="fake-ref"/></c>
<c>0..1</c>
</texttable>
<?rfc compact="no"?>
</section>
<section title="Digressions" anchor="digressions">
    <t>
Digressions are sub-blocks of texts that don&apos;t appear in the RFC.
There are three types of digressions: document blocks, references
blocks, and open questions.
    </t>
    <t>
A digress begins with a line that starts with two open braces (&quot;{{&quot;)
followed by the name of the block and a colon (&quot;:&quot;).  The digress ends
with a line containing two close braces (&quot;}}&quot;).
    </t>
        <figure>
            <artwork><![CDATA[
    {{type-name:
       contents
       of the
       digress
    }}
            ]]></artwork>
        </figure>
    <t>
Digressions of unknown type are ignored completely.
    </t>
<section title="Document Digressions" anchor="document-digressions">
        <?rfc compact="yes"?>
        <texttable>
<ttcol align='left' width='60em'>Open Question</ttcol>
            <c>
Note that this needs to be updated for RFC7991, which deprecates
some of these fields.
            </c>
        </texttable>
        <?rfc compact="no"?>
    <t>
The &quot;document&quot; digression contains information about the document and
is used for RFC header fields.  The contents of the digression are
name/value pairs on lines ending with semi-colons:
    </t>
        <figure>
            <artwork><![CDATA[
    {{document:
        ipr pre5378Trust200902;
        category std;
        references back.xml;
        abbreviation YANG;
        title "The YANG 12.0 Data Modeling Language";
        contributor "author:Joe Example:Example Inc:j@example.com";
        keyword NETCONF;
        keyword XML;
        keyword "data modeling";
    }}
            ]]></artwork>
        </figure>
    <t>
Document values are taken from both the document section and the
arguments to oxtradoc, with the latter taking precedence.  The
following section lists the name, options, and contents of the
variables fields within the document digression:
    </t>
<t>
 <list style="hanging">
        <t hangText="name (-n)">
Name of the document, suitable for rfc/@docName.
 </t>
        <t hangText="ipr (-i) (default &quot;none&quot;)">
IPR classification, suitable for rfc/@ipr.
 </t>
        <t hangText="category (-c)">
Category of the document, suitable for rfc/@category.
 </t>
        <t hangText="references">
Lists a file containing the references, in XML format.  See <xref target="ref-back"/>
for additional information.
 </t>
        <t hangText="abbreviation (-a)">
Short name of the document, suitable for rfc/front/title/@abbrev.
 </t>
        <t hangText="title (-t)">
Formal title of the document, suitable for rfc/front/title.
 </t>
        <t hangText="contributor">
Lists information about a document contributor, and may appear
multiple times.  Each value should be a role, name,
organization, and email address separated by colons.
 </t>
        <t hangText="keyword">
Keywords for the document, suitable for rfc/front/keyword.
This line may appear multiple times to supply a set of keywords.
 </t>
 </list>
</t>
</section>
<section title="Open Question Digressions" anchor="open-question-digressions">
    <t>
A &quot;open question&quot; digress is used to record an open question within
the document for the benefit of the document authors.  The question
should be resolved before publication.  An open question can be
entered using a &quot;question&quot; digression, or may appear in a line
that starts with a question mark.
    </t>
        <figure>
            <artwork><![CDATA[
   ?  Are we sure we want to encode this in EBCDIC?
            ]]></artwork>
        </figure>
</section>
<section title="References Digressions" anchor="ref-back">
    <t>
External references are handled by oxtradoc using a two-phase
approach.  Typically a &quot;refences.txt&quot; file is created by the document
author that lists the references used in the document.  The digression
can appear directly in the document, but there is some significant
processing involved in turning this simple list into the complex and
verbose XML that xml2rfc needs for references.  &quot;oxtradoc -m mkback&quot;
turns a references file (&quot;references.txt&quot;) into a suitable XML file
(&quot;references.xml&quot;).  The Makefile for rfcdoc handles this dependency
automatically.
    </t>
    <t>
The format of the references file is a digression with the name
&quot;references&quot;.  The digression contains a &quot;title&quot; and a series of
reference names.  The title for a references digression can be
&quot;Normative References&quot; or &quot;Informative References&quot;:
    </t>
        <figure>
            <artwork><![CDATA[
    {{references:
        title "Informative References";
        ietf-ref RFC2119;
        ietf-ref RFC6241;
        ietf-ref I-D.ietf-netmod-revised-datastores;
    }}
            ]]></artwork>
        </figure>
</section>
</section>
<section title="Additional Formatting" anchor="additional-formatting">
<t>
 <list style="symbols">
 <t>
Lines starting with pound signs (&quot;#&quot;) are comments and are
ignored.
 </t>
 <t>
Lines starting with at signs (&quot;@&quot;) are passed through upchanged.
This serves as an escape mechanism for avoiding oxtradoc processing
or for allowing pre-formatted content.  Consider it as an option of
last resort.
 </t>
 </list>
</t>
</section>
</section>
<section title="Additional Notes" anchor="additional-notes">
    <t>
Since github.com supports &quot;org mode&quot; rendering of &quot;.org&quot; files, naming
your file with a &quot;.org&quot; extension means automatic rendering of a
subset of oxtradoc features in the github display.
    </t>
</section>
</section>
<section title="rfcdoc and rfcexample" anchor="rfcdoc-and-rfcexample">
    <t>
This project consists of two github repositories.  The first (&quot;rfcdoc&quot;)
contains the captive versions of the tools used (oxtradoc, pyang,
xml2rfc) and a small .mk file that simplifies using the tools.
    </t>
    <t>
The second (&quot;rfcexample&quot;) is a fork-friendly repository that
simplifies the use of rfcdoc by allowing the user to fork that repo
and immediately start using the tools.  Use of &quot;rfcdoc&quot; is not tied to
&quot;rfcexample&quot;, but it might be easier for beginners.
    </t>
    <t>
&quot;rfcexample&quot; includes a Makefile that gives access to variables and
targets that can be invoked from the command line to perform
formatting, validation, and other tasks.
    </t>
<section title="Makefile Variables" anchor="makefile-variables">
    <t>
The &quot;Makefile&quot; in your project will direct the operation of these
tools.  The Makefile should have the following fields:
    </t>
<t>
 <list style="hanging">
        <t hangText="draft">
Filename of the document
 </t>
        <t hangText="output_base">
Basename (filename without extension) of the output file.
 </t>
        <t hangText="examples">
Lists any example files.
 </t>
        <t hangText="trees">
Lists files of tree diagrams that should be automatically generated
from the YANG files.
 </t>
        <t hangText="std_yang">
Lists YANG modules that are part of the document.
 </t>
        <t hangText="ex_yang">
 </t>
        <t hangText="references_src">
Source filename for the references, e.g. &quot;references.txt&quot;.
 </t>
        <t hangText="references_xml">
Destination filename of the references, e.g.&quot;references.xml&quot;.
 </t>
        <t hangText="rfcdoc">
Directory were the &quot;rfcdoc&quot; git module appears.
 </t>
 </list>
</t>
    <t>
In this example Makefile, the user has written a draft named
&quot;nmda&#8209;netconf.org&quot;, which is used to generate
&quot;draft&#8209;dsdt&#8209;nmda&#8209;netconf&#8209;XX.txt&quot;.  A YANG module named
&quot;ietf&#8209;netconf&#8209;datastores.yang&quot; is included as part of the generated
file, and can be validated via the &quot;make validate&quot; command.
    </t>
        <figure>
            <artwork><![CDATA[
    draft = nmda-netconf.org
    output_base = draft-dsdt-nmda-netconf
    examples =
    trees =
    std_yang = ietf-netconf-datastores.yang
    ex_yang =

    rfcdoc = rfcdoc
    include ${rfcdoc}/rfcdoc.mk
            ]]></artwork>
        </figure>
    <t>
When working with multiple drafts, a common rfcdoc/ directory can be
shared, typically by cloning the &quot;rfcdoc&quot; project into
the parent directory, rather can forking the &quot;rfcexample&quot; project.
To use this ../rfcdoc/ directory, set the rfcdoc variable
to that path in your Makefile:
    </t>
        <figure>
            <artwork><![CDATA[
    rfcdoc = ../rfcdoc
            ]]></artwork>
        </figure>
</section>
<section title="Makefile Targets" anchor="makefile-targets">
    <t>
The following targets are available for &quot;make&quot; via rfcdoc.mk:
    </t>
<t>
 <list style="hanging">
        <t hangText="submit">
&quot;make submit&quot; will build both the text and xml versions of the draft.
 </t>
        <t hangText="validate">
Validates all YANG modules using pyang, include both standard modules
and example modules.  Any XML example payloads are also validated.
 </t>
        <t hangText="idnits">
Runs the &quot;idnits&quot; program on the draft so identify RFC-editor-related
issues before publication.  For example, references in the &quot;Abstract&quot;
are not allowed.
 </t>
        <t hangText="new-tag">
After submitting the draft for publication, use this target to advance
the number of the draft, e.g. from &quot;&#8209;00.txt&quot; to &quot;&#8209;01.txt&quot;.  We use a
&quot;git tag&quot; for this.
 </t>
        <t hangText="clean">
Cleans all generated files from the directory.
 </t>
 </list>
</t>
</section>
</section>
<section title="How to Use these Tools" anchor="how-to">
    <t>
This section contains the simple steps for building your RFC.  In
these examples, replace MYNAME with your github login and MYDRAFT
with that name of your draft.
    </t>
    <t>
Avoid the desire to use the words &quot;draft&quot; or your own name in
the name of your draft, since this will hopefully be temporary and
your draft will be accepted by a working group, and eventually
published.  Once it&apos;s an RFC, having the base document be called
&quot;draft&#8209;phil&#8209;magic&#8209;cookies.org&quot; would be bad.  Best to start naming
it &quot;magic&#8209;cookies.org&quot; from the start.
    </t>
<t>
 <list style="hanging">
        <t hangText="Fork the rfcexample repo">
Visit the https://github.com/philshafer/rfcexample and click on the
&quot;Fork&quot; button in the upper right.
 </t>
        <t hangText="Rename the repo to something appropriate">
Under &quot;Settings&quot;, enter the new name for your repo, MYDRAFT.
If you want to use github to track issues with your draft (a fine
idea), the select &quot;Issues&quot; under the &quot;Features&quot; list.  Then click on
the &quot;Rename&quot; button.
 </t>
        <t hangText="Clone the rfcexample repo">
On your laptop, make a local copy of the repo (aka &quot;clone&quot;) by using
the &quot;git clone&quot; command.  Note that the need the &quot;&#8209;&#8209;recursive&quot; flag
to ensure that the submodules rfcdoc uses are fully populated.
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
    git clone --recursive https://github.com/MYNAME/MYDRAFT
    cd MYDRAFT
            ]]></artwork>
        </figure>
<t>
 <list style="hanging">
        <t hangText="Build the rfcdoc repo">
The rfcexample repo (and now your MYDRAFT repo) contains a set of
submodules containing captive copies of the required tools.  This
is for simplicity and ease-of-use, but also keeps things stable.
You need to build these tools using the following command:
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
    sh rfcdoc/install.sh
            ]]></artwork>
        </figure>
    <t>
Resolve any errors before continuing any further.  If the tools
are not installed correctly, nothing will work, so be sure this
step is done properly.
    </t>
<t>
 <list style="hanging">
        <t hangText="Rename the starting point document">
Your repo has a copy of a document meant to help you get started,
but you&apos;ll need to rename it before continuing:
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
    git mv rfcexample.org MYDRAFT.org
    git commit -m 'Rename' MYDRAFT.org
    git push
            ]]></artwork>
        </figure>
<t>
 <list style="hanging">
        <t hangText="Edit your Makefile">
The Makefile under your new repo has a few variables that direct
the operation of the tools.  The first two are vital, and the rest
can be used as your document grows.  The &quot;draft&quot; variable is the
name of your input document, so it should be set to &quot;MYDRAFT.org&quot;.
The output_base is the basename of your output document, and that
value will depend on the working group, status, and topic of your
document.  For now, we&apos;ll use &quot;draft&#8209;MYNAME&#8209;MYDRAFT&quot;.  The remaining
variables should be empty.  The last two lines of the file should not
be changed, since they allow us to find your copy of rfcdoc.
 </t>
 </list>
</t>
        <figure>
            <artwork><![CDATA[
    draft = MYDRAFT.org
    output_base = draft-MYNAME-MYDRAFT
    examples =
    trees =
    std_yang =
    ex_yang =

    rfcdoc = rfcdoc
    include ${rfcdoc}/rfcdoc.mk
            ]]></artwork>
        </figure>
<t>
 <list style="hanging">
        <t hangText="Test the build">
To performa a test build, run &quot;make&quot;.  It should make a fairly
meaningless document, but that should fill your eyes with pride.
 </t>
        <t hangText="Edit your README.md">
Fix your README.md to contain proper and accurate information.
 </t>
        <t hangText="Start editing your draft">
Go on!  Get to work!
 </t>
 </list>
</t>
</section>
</middle>
<back>
</back></rfc>
